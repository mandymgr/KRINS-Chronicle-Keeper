# Multi-stage build for React Trading Dashboard with maximum performance
FROM node:20-alpine AS builder

LABEL maintainer="Krin & Mandy Revolutionary Trading System"
LABEL description="Production React Trading Dashboard - Real-time trading interface"

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Set working directory
WORKDIR /app

# Copy package files for dependency caching
COPY package.json package-lock.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# Install dev dependencies for build
RUN npm ci --no-audit --no-fund

# Copy source code
COPY . .

# Build the application with production optimizations
ENV NODE_ENV=production
ENV VITE_API_URL=/api/v1
ENV VITE_WS_URL=/ws
ENV GENERATE_SOURCEMAP=false

# Build the app
RUN npm run build

# Optimize build artifacts
RUN npx vite-bundle-analyzer dist --mode production --json > bundle-analysis.json 2>/dev/null || true

# Production stage - nginx with optimized configuration
FROM nginx:1.25-alpine

# Install additional tools for performance
RUN apk add --no-cache \
    curl \
    ca-certificates

# Remove default nginx configuration
RUN rm -rf /etc/nginx/conf.d/default.conf
RUN rm -rf /usr/share/nginx/html/*

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Create optimized nginx configuration for trading dashboard
COPY <<EOF /etc/nginx/conf.d/trading-dashboard.conf
# Main server block
server {
    listen 80;
    listen [::]:80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss: http: https:;" always;
    
    # Enable cross-origin isolation for SharedArrayBuffer (needed for WASM)
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml
        text/css
        text/javascript
        text/xml
        text/plain
        text/html;
    
    # Brotli compression (if module is available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/javascript application/json image/svg+xml application/xml+rss;
    
    # Cache static assets aggressively
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # Handle pre-compressed assets
        location ~* \\.gz\\$ {
            gzip_static always;
            gunzip on;
        }
    }
    
    # Cache HTML files for short time (allows quick updates)
    location ~* \\.(html|htm)\\$ {
        expires 5m;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Handle API requests - proxy to backend
    location /api/ {
        proxy_pass http://trading-go-api:8080/api/;
        proxy_set_header Host \\$host;
        proxy_set_header X-Real-IP \\$remote_addr;
        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \\$scheme;
        
        # Timeouts for high-frequency trading
        proxy_connect_timeout 1s;
        proxy_send_timeout 1s;
        proxy_read_timeout 5s;
        
        # Buffering optimization
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Disable caching for API responses
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Handle WebSocket connections
    location /ws {
        proxy_pass http://trading-go-api:8080/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \\$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \\$host;
        proxy_set_header X-Real-IP \\$remote_addr;
        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \\$scheme;
        
        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }
    
    # Handle metrics endpoint
    location /metrics {
        proxy_pass http://trading-go-api:8080/metrics;
        proxy_set_header Host \\$host;
        
        # Basic auth for metrics (in production)
        # auth_basic "Metrics";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }
    
    # SPA fallback - serve index.html for all routes
    location / {
        try_files \\$uri \\$uri/ /index.html;
        
        # Optimize for single-page application
        add_header Cache-Control "no-cache";
        
        # Preload critical resources
        location = /index.html {
            add_header Link "</assets/index.css>; rel=preload; as=style";
            add_header Link "</assets/index.js>; rel=preload; as=script";
        }
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
    
    # Security - deny access to hidden files
    location ~ /\\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Deny access to sensitive files
    location ~ \\.(env|log|ini|conf)\\$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Enable server-sent events for real-time updates
    location /events {
        proxy_pass http://trading-go-api:8080/events;
        proxy_set_header Host \\$host;
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        chunked_transfer_encoding off;
        proxy_buffering off;
        proxy_cache off;
    }
}

# HTTP/2 server block (if SSL is configured)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # SSL configuration (placeholder - use real certificates in production)
    # ssl_certificate /etc/ssl/certs/trading-dashboard.crt;
    # ssl_certificate_key /etc/ssl/private/trading-dashboard.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    
    # Include the same configuration as HTTP server
    include /etc/nginx/conf.d/trading-dashboard.conf;
}
EOF

# Global nginx optimizations
COPY <<EOF /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Optimize for high-performance trading
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging format optimized for monitoring
    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] "\\$request" '
                    '\\$status \\$body_bytes_sent "\\$http_referer" '
                    '"\\$http_user_agent" "\\$http_x_forwarded_for" '
                    'rt=\\$request_time uct="\\$upstream_connect_time" '
                    'uht="\\$upstream_header_time" urt="\\$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096;
    server_tokens off;
    
    # Rate limiting for DDoS protection
    limit_req_zone \\$binary_remote_addr zone=trading:10m rate=100r/s;
    limit_req_status 429;
    
    # Connection limiting
    limit_conn_zone \\$binary_remote_addr zone=addr:10m;
    limit_conn addr 100;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeouts
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Create startup script with health checks
COPY <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e

echo "🚀 Starting Revolutionary Trading Dashboard..."

# Validate nginx configuration
echo "🔍 Validating nginx configuration..."
nginx -t

# Create required directories
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx

# Set permissions
chown -R nginx:nginx /var/log/nginx
chown -R nginx:nginx /var/cache/nginx

# Start nginx
echo "🌐 Starting nginx web server..."
exec nginx -g "daemon off;"
EOF

RUN chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost/health || exit 1

# Expose port
EXPOSE 80 443

# Performance and security settings
ENV NGINX_WORKER_PROCESSES=auto
ENV NGINX_WORKER_CONNECTIONS=4096
ENV NGINX_KEEPALIVE_TIMEOUT=65

# Build metadata
ARG BUILD_DATE
ARG VCS_REF  
ARG VERSION

LABEL org.label-schema.build-date=\\$BUILD_DATE
LABEL org.label-schema.name="Revolutionary Trading Dashboard"
LABEL org.label-schema.description="Production React trading dashboard with real-time capabilities"
LABEL org.label-schema.version=\\$VERSION
LABEL org.label-schema.vcs-ref=\\$VCS_REF
LABEL org.label-schema.vcs-url="https://github.com/revolutionary-trading/react-dashboard"
LABEL org.label-schema.schema-version="1.0"

# Start the application
ENTRYPOINT ["/docker-entrypoint.sh"]