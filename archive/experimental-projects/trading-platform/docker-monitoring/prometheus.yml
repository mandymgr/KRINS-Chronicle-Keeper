# Revolutionary Trading System - Prometheus Configuration
# Optimized for monitoring 1 million transactions per second

global:
  scrape_interval: 5s        # Frequent scraping for real-time metrics
  evaluation_interval: 5s    # Frequent rule evaluation
  scrape_timeout: 4s
  external_labels:
    cluster: 'trading-production'
    environment: 'production'
    system: 'revolutionary-trading'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - trading-alertmanager:9093

# Rules files
rule_files:
  - "rules.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 10s
    metrics_path: /metrics

  # Go Streaming API metrics
  - job_name: 'trading-go-api'
    static_configs:
      - targets: ['trading-go-api:8080']
    scrape_interval: 1s      # High frequency for trading metrics
    metrics_path: /metrics
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: trading-go-api:8080
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'go_.*'
        action: drop      # Drop golang runtime metrics to reduce noise
      - source_labels: [__name__]
        regex: 'process_.*'
        action: drop      # Drop process metrics

  # Rust WASM Orderbook metrics
  - job_name: 'trading-rust-orderbook'
    static_configs:
      - targets: ['trading-rust-orderbook:8080']
    scrape_interval: 500ms   # Ultra-high frequency for orderbook
    metrics_path: /metrics
    params:
      format: ['prometheus']

  # PostgreSQL database metrics
  - job_name: 'trading-postgres'
    static_configs:
      - targets: ['trading-postgres-exporter:9187']
    scrape_interval: 5s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '(.*):(.*)'
        replacement: 'postgres-primary'

  # Redis cache metrics
  - job_name: 'trading-redis'
    static_configs:
      - targets: ['trading-redis-exporter:9121']
    scrape_interval: 2s
    metrics_path: /metrics

  # Node exporter for host metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['trading-node-exporter:9100']
    scrape_interval: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '(.*):(.*)'
        replacement: 'trading-host'

  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['trading-cadvisor:8080']
    scrape_interval: 5s
    metrics_path: /metrics
    metric_relabel_configs:
      - source_labels: [container_label_com_docker_compose_service]
        target_label: service_name
      - source_labels: [__name__]
        regex: 'container_(network_receive_bytes_total|network_transmit_bytes_total|cpu_usage_seconds_total|memory_usage_bytes|fs_usage_bytes)'
        action: keep

  # Traefik reverse proxy metrics
  - job_name: 'traefik'
    static_configs:
      - targets: ['trading-traefik:8082']
    scrape_interval: 5s
    metrics_path: /metrics

  # Custom application metrics via service discovery
  - job_name: 'docker-services'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_label_prometheus_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_docker_container_label_prometheus_port]
        action: replace
        target_label: __address__
        regex: (.+)
        replacement: $1
      - source_labels: [__meta_docker_container_label_prometheus_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
        replacement: $1
      - source_labels: [__meta_docker_container_name]
        action: replace
        target_label: container_name
        regex: /(.+)
        replacement: $1
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        action: replace
        target_label: service_name

  # Trading system performance metrics (custom endpoints)
  - job_name: 'trading-performance'
    static_configs:
      - targets: 
        - 'trading-go-api:8080'
        - 'trading-rust-orderbook:8080'
    scrape_interval: 100ms   # Ultra-high frequency for performance
    metrics_path: /performance-metrics
    params:
      detailed: ['true']

  # Real-time orderbook metrics
  - job_name: 'orderbook-realtime'
    static_configs:
      - targets: ['trading-rust-orderbook:8080']
    scrape_interval: 50ms    # 20 times per second
    metrics_path: /orderbook-metrics
    params:
      symbols: ['BTCUSD', 'ETHUSD', 'ADAUSD']

  # WebSocket connection metrics
  - job_name: 'websocket-metrics'
    static_configs:
      - targets: ['trading-go-api:8080']
    scrape_interval: 1s
    metrics_path: /ws-metrics

  # Database connection pool metrics
  - job_name: 'pgbouncer'
    static_configs:
      - targets: ['trading-pgbouncer:9127']  # Assuming pgbouncer exporter
    scrape_interval: 5s

# Storage configuration for high-volume metrics
storage:
  tsdb:
    retention.time: 30d
    retention.size: 50GB
    min-block-duration: 2m   # Short blocks for real-time queries
    max-block-duration: 2h
    wal-compression: true

# Remote write for long-term storage (optional)
# remote_write:
#   - url: "https://prometheus-remote-storage.example.com/api/v1/write"
#     queue_config:
#       capacity: 10000
#       max_samples_per_send: 1000
#       batch_send_deadline: 5s
#       min_shards: 1
#       max_shards: 200

# Remote read for historical data (optional)
# remote_read:
#   - url: "https://prometheus-remote-storage.example.com/api/v1/read"