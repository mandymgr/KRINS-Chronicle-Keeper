version: '3.8'

services:
  # Primary PostgreSQL database with TimescaleDB
  trading-db-primary:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: trading-db-primary
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-revolutionary_trading_2025}
      TIMESCALEDB_TELEMETRY: "off"
      
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: "2GB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "6GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "512MB"
      POSTGRES_MAX_CONNECTIONS: "1000"
      POSTGRES_WAL_LEVEL: "logical"
      POSTGRES_MAX_WAL_SENDERS: "10"
      POSTGRES_MAX_REPLICATION_SLOTS: "10"
      
      # Enable real-time replication
      POSTGRES_ARCHIVE_MODE: "on"
      POSTGRES_ARCHIVE_COMMAND: "/bin/true"
      
    ports:
      - "5432:5432"
    volumes:
      - trading_primary_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./performance-tuning.sql:/docker-entrypoint-initdb.d/02-performance.sql:ro
      - ./sample-data.sql:/docker-entrypoint-initdb.d/03-sample-data.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=timescaledb
      -c log_statement=all
      -c log_min_duration_statement=10
      -c log_line_prefix='%t [%p-%l] %q%u@%d '
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_admin -d trading_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - "traefik.enable=false"
      - "description=Primary PostgreSQL database with TimescaleDB for trading system"

  # Read replica for analytics and reporting
  trading-db-replica:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: trading-db-replica
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-revolutionary_trading_2025}
      TIMESCALEDB_TELEMETRY: "off"
      
      # Replica configuration
      PGUSER: trading_admin
      POSTGRES_PRIMARY_CONNINFO: "host=trading-db-primary port=5432 user=trading_admin password=${POSTGRES_PASSWORD:-revolutionary_trading_2025} dbname=trading_system"
      POSTGRES_REPLICA_MODE: "on"
      POSTGRES_HOT_STANDBY: "on"
      
    ports:
      - "5433:5432"
    volumes:
      - trading_replica_data:/var/lib/postgresql/data
      - ./postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=timescaledb
      -c hot_standby=on
      -c max_standby_streaming_delay=30s
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      trading-db-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_admin -d trading_system"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=false"
      - "description=Read replica for analytics and reporting queries"

  # Redis for caching and real-time data
  trading-redis:
    image: redis:7-alpine
    container_name: trading-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_revolutionary_2025}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_revolutionary_2025}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - trading_redis_data:/data
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_revolutionary_2025}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # PostgreSQL connection pooler (PgBouncer)
  trading-pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: trading-pgbouncer
    environment:
      DATABASES_HOST: trading-db-primary
      DATABASES_PORT: 5432
      DATABASES_USER: trading_admin
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-revolutionary_trading_2025}
      DATABASES_DBNAME: trading_system
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 2000
      DEFAULT_POOL_SIZE: 50
      MAX_DB_CONNECTIONS: 100
      RESERVE_POOL_SIZE: 10
      RESERVE_POOL_TIMEOUT: 5
      SERVER_ROUND_ROBIN: 1
      IGNORE_STARTUP_PARAMETERS: extra_float_digits
    ports:
      - "5430:5432"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      trading-db-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U trading_admin"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Database monitoring with pgAdmin
  trading-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trading-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@trading-system.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_revolutionary_2025}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
      PGADMIN_CONFIG_LOGIN_BANNER: "ðŸš€ Revolutionary Trading System Database Administration"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: "WARNING"
    ports:
      - "5050:80"
    volumes:
      - trading_pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json:ro
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - trading-db-primary
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`db-admin.trading-system.local`)"

  # Database backup service
  trading-backup:
    image: prodrigestivill/postgres-backup-local:15
    container_name: trading-backup
    environment:
      POSTGRES_HOST: trading-db-primary
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-revolutionary_trading_2025}
      POSTGRES_EXTRA_OPTS: "--clean --if-exists"
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 12
      BACKUP_KEEP_MONTHS: 12
      HEALTHCHECK_PORT: 8080
      TZ: UTC
    volumes:
      - trading_backups:/backups
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      trading-db-primary:
        condition: service_healthy

  # Prometheus for metrics collection
  trading-prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - trading_prometheus_data:/prometheus
    networks:
      - trading-network
    restart: unless-stopped

  # PostgreSQL Exporter for Prometheus
  trading-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: trading-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://trading_admin:${POSTGRES_PASSWORD:-revolutionary_trading_2025}@trading-db-primary:5432/trading_system?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./postgres-exporter-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      trading-db-primary:
        condition: service_healthy

networks:
  trading-network:
    driver: bridge
    name: trading-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  trading_primary_data:
    driver: local
    name: trading_primary_data
  trading_replica_data:
    driver: local
    name: trading_replica_data
  trading_redis_data:
    driver: local
    name: trading_redis_data
  trading_pgadmin_data:
    driver: local
    name: trading_pgadmin_data
  trading_backups:
    driver: local
    name: trading_backups
  trading_prometheus_data:
    driver: local
    name: trading_prometheus_data

# Health check script
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s