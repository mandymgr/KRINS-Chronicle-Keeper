"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/jira/issues/route";
exports.ids = ["app/api/jira/issues/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjira%2Fissues%2Froute&page=%2Fapi%2Fjira%2Fissues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjira%2Fissues%2Froute.ts&appDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjira%2Fissues%2Froute&page=%2Fapi%2Fjira%2Fissues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjira%2Fissues%2Froute.ts&appDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_mandymarigjervikrygg_Desktop_dev_memory_os_starter_living_spec_dashboard_app_api_jira_issues_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/jira/issues/route.ts */ \"(rsc)/./app/api/jira/issues/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/jira/issues/route\",\n        pathname: \"/api/jira/issues\",\n        filename: \"route\",\n        bundlePath: \"app/api/jira/issues/route\"\n    },\n    resolvedPagePath: \"/Users/mandymarigjervikrygg/Desktop/dev-memory-os-starter/living-spec-dashboard/app/api/jira/issues/route.ts\",\n    nextConfigOutput,\n    userland: _Users_mandymarigjervikrygg_Desktop_dev_memory_os_starter_living_spec_dashboard_app_api_jira_issues_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/jira/issues/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZqaXJhJTJGaXNzdWVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZqaXJhJTJGaXNzdWVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGamlyYSUyRmlzc3VlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hbmR5bWFyaWdqZXJ2aWtyeWdnJTJGRGVza3RvcCUyRmRldi1tZW1vcnktb3Mtc3RhcnRlciUyRmxpdmluZy1zcGVjLWRhc2hib2FyZCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZtYW5keW1hcmlnamVydmlrcnlnZyUyRkRlc2t0b3AlMkZkZXYtbWVtb3J5LW9zLXN0YXJ0ZXIlMkZsaXZpbmctc3BlYy1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzREO0FBQ3pJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2aW5nLXNwZWMtZGFzaGJvYXJkLz9kODczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9tYW5keW1hcmlnamVydmlrcnlnZy9EZXNrdG9wL2Rldi1tZW1vcnktb3Mtc3RhcnRlci9saXZpbmctc3BlYy1kYXNoYm9hcmQvYXBwL2FwaS9qaXJhL2lzc3Vlcy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvamlyYS9pc3N1ZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9qaXJhL2lzc3Vlc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvamlyYS9pc3N1ZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbWFuZHltYXJpZ2plcnZpa3J5Z2cvRGVza3RvcC9kZXYtbWVtb3J5LW9zLXN0YXJ0ZXIvbGl2aW5nLXNwZWMtZGFzaGJvYXJkL2FwcC9hcGkvamlyYS9pc3N1ZXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2ppcmEvaXNzdWVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjira%2Fissues%2Froute&page=%2Fapi%2Fjira%2Fissues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjira%2Fissues%2Froute.ts&appDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/jira/issues/route.ts":
/*!**************************************!*\
  !*** ./app/api/jira/issues/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./lib/config.ts\");\n/* harmony import */ var _lib_rateLimit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/rateLimit */ \"(rsc)/./lib/rateLimit.ts\");\n/* harmony import */ var _lib_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/cache */ \"(rsc)/./lib/cache.ts\");\n/* harmony import */ var _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/integrations/jira */ \"(rsc)/./lib/integrations/jira.ts\");\n\n\n\n\n\nasync function GET(request) {\n    try {\n        // Check if Jira integration is enabled\n        if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.isJiraEnabled || !_lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Jira integration is not enabled\"\n            }, {\n                status: 503\n            });\n        }\n        // Apply rate limiting\n        const rateLimitResult = (0,_lib_rateLimit__WEBPACK_IMPORTED_MODULE_2__.rateLimitMiddleware)(\"api:jira\")(request);\n        if (!rateLimitResult.allowed) {\n            return (0,_lib_rateLimit__WEBPACK_IMPORTED_MODULE_2__.createRateLimitErrorResponse)({\n                allowed: false,\n                limit: parseInt(rateLimitResult.headers[\"X-RateLimit-Limit\"]),\n                remaining: 0,\n                resetTime: new Date(rateLimitResult.headers[\"X-RateLimit-Reset\"]).getTime()\n            });\n        }\n        // Parse query parameters\n        const { searchParams } = new URL(request.url);\n        const filter = searchParams.get(\"filter\") || \"active\";\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const days = parseInt(searchParams.get(\"days\") || \"30\");\n        const status = searchParams.get(\"status\");\n        const assignee = searchParams.get(\"assignee\");\n        let issues;\n        // Handle pre-defined filters\n        switch(filter){\n            case \"active\":\n                issues = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.getActiveIssues(Math.min(limit, 100));\n                break;\n            case \"recent\":\n                issues = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.getRecentIssues(days, Math.min(limit, 100));\n                break;\n            case \"status\":\n                if (!status) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Status parameter required when using status filter\"\n                    }, {\n                        status: 400\n                    });\n                }\n                issues = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.getIssuesByStatus(status, Math.min(limit, 100));\n                break;\n            case \"assignee\":\n                if (!assignee) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Assignee parameter required when using assignee filter\"\n                    }, {\n                        status: 400\n                    });\n                }\n                issues = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.getIssuesByAssignee(assignee, Math.min(limit, 100));\n                break;\n            default:\n                issues = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.getActiveIssues(Math.min(limit, 100));\n        }\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            data: issues,\n            meta: {\n                count: issues.length,\n                source: \"jira\",\n                filter,\n                limit\n            }\n        });\n        // Set cache headers\n        const cacheHeaders = (0,_lib_cache__WEBPACK_IMPORTED_MODULE_3__.getCacheHeaders)(\"jira\");\n        Object.entries(cacheHeaders).forEach(([key, value])=>{\n            response.headers.set(key, value);\n        });\n        // Set rate limit headers\n        Object.entries(rateLimitResult.headers).forEach(([key, value])=>{\n            response.headers.set(key, value);\n        });\n        return response;\n    } catch (error) {\n        console.error(\"Jira issues API error:\", error);\n        if (error instanceof _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.ConfigurationError) {\n            if (error.statusCode === 401) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira authentication failed - check your credentials\"\n                }, {\n                    status: 401\n                });\n            }\n            if (error.statusCode === 403) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira access forbidden - check your permissions\"\n                }, {\n                    status: 403\n                });\n            }\n            if (error.statusCode === 404) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira project not found\"\n                }, {\n                    status: 404\n                });\n            }\n            if (error.statusCode === 429) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira API rate limit exceeded\"\n                }, {\n                    status: 429,\n                    headers: {\n                        \"Retry-After\": \"60\"\n                    }\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error.message\n            }, {\n                status: error.statusCode || 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        // Check if Jira integration is enabled\n        if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.isJiraEnabled || !_lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Jira integration is not enabled\"\n            }, {\n                status: 503\n            });\n        }\n        // Apply rate limiting\n        const rateLimitResult = (0,_lib_rateLimit__WEBPACK_IMPORTED_MODULE_2__.rateLimitMiddleware)(\"api:jira\")(request);\n        if (!rateLimitResult.allowed) {\n            return (0,_lib_rateLimit__WEBPACK_IMPORTED_MODULE_2__.createRateLimitErrorResponse)({\n                allowed: false,\n                limit: parseInt(rateLimitResult.headers[\"X-RateLimit-Limit\"]),\n                remaining: 0,\n                resetTime: new Date(rateLimitResult.headers[\"X-RateLimit-Reset\"]).getTime()\n            });\n        }\n        const body = await request.json();\n        const { jql, startAt = 0, maxResults = 50 } = body;\n        if (!jql) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"JQL query is required\"\n            }, {\n                status: 400\n            });\n        }\n        const result = await _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.jira.searchIssues(jql, Math.min(maxResults, 100), startAt);\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            data: result.issues,\n            meta: {\n                count: result.issues.length,\n                total: result.total,\n                startAt: result.startAt,\n                maxResults: result.maxResults,\n                source: \"jira\"\n            }\n        });\n        // Set rate limit headers\n        Object.entries(rateLimitResult.headers).forEach(([key, value])=>{\n            response.headers.set(key, value);\n        });\n        return response;\n    } catch (error) {\n        console.error(\"Jira custom search API error:\", error);\n        if (error instanceof _lib_integrations_jira__WEBPACK_IMPORTED_MODULE_4__.ConfigurationError) {\n            if (error.statusCode === 401) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira authentication failed - check your credentials\"\n                }, {\n                    status: 401\n                });\n            }\n            if (error.statusCode === 403) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira access forbidden - check your permissions\"\n                }, {\n                    status: 403\n                });\n            }\n            if (error.statusCode === 404) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira project not found\"\n                }, {\n                    status: 404\n                });\n            }\n            if (error.statusCode === 429) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Jira API rate limit exceeded\"\n                }, {\n                    status: 429,\n                    headers: {\n                        \"Retry-After\": \"60\"\n                    }\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error.message\n            }, {\n                status: error.statusCode || 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/jira/issues/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache.ts":
/*!**********************!*\
  !*** ./lib/cache.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_DURATION: () => (/* binding */ CACHE_DURATION),\n/* harmony export */   cache: () => (/* binding */ cache),\n/* harmony export */   cachedFetch: () => (/* binding */ cachedFetch),\n/* harmony export */   generateCacheKey: () => (/* binding */ generateCacheKey),\n/* harmony export */   getCacheHeaders: () => (/* binding */ getCacheHeaders)\n/* harmony export */ });\n// Cache configuration in milliseconds\nconst CACHE_DURATION = {\n    commits: 5 * 60 * 1000,\n    releases: 15 * 60 * 1000,\n    milestones: 15 * 60 * 1000,\n    jira: 2 * 60 * 1000,\n    health: 1 * 60 * 1000\n};\nclass MemoryCache {\n    set(key, data, maxAge) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now(),\n            maxAge\n        });\n    }\n    get(key) {\n        const entry = this.cache.get(key);\n        if (!entry) return null;\n        const now = Date.now();\n        const age = now - entry.timestamp;\n        const isStale = age > entry.maxAge;\n        return {\n            data: entry.data,\n            isStale\n        };\n    }\n    delete(key) {\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.cache.clear();\n    }\n    // Clean up expired entries (optional background cleanup)\n    cleanup() {\n        const now = Date.now();\n        for (const [key, entry] of this.cache.entries()){\n            // Remove entries older than 2x their maxAge to implement stale-while-revalidate\n            if (now - entry.timestamp > entry.maxAge * 2) {\n                this.cache.delete(key);\n            }\n        }\n    }\n    // Get cache statistics\n    stats() {\n        return {\n            size: this.cache.size,\n            keys: Array.from(this.cache.keys())\n        };\n    }\n    constructor(){\n        this.cache = new Map();\n    }\n}\nconst cache = new MemoryCache();\n// Utility function to get cache headers for HTTP responses\nfunction getCacheHeaders(resource) {\n    const maxAge = CACHE_DURATION[resource] / 1000; // Convert to seconds\n    const staleWhileRevalidate = maxAge; // Same duration for stale-while-revalidate\n    return {\n        \"Cache-Control\": `public, max-age=${maxAge}, stale-while-revalidate=${staleWhileRevalidate}`,\n        \"Vary\": \"Accept-Encoding\"\n    };\n}\n// Helper function to generate cache keys\nfunction generateCacheKey(prefix, params) {\n    const cleanParams = Object.entries(params).filter(([_, value])=>value !== undefined).map(([key, value])=>`${key}:${value}`).sort().join(\"|\");\n    return `${prefix}:${cleanParams}`;\n}\n// Cached fetch wrapper with stale-while-revalidate pattern\nasync function cachedFetch(cacheKey, fetchFn, maxAge, force = false) {\n    if (!force) {\n        const cached = cache.get(cacheKey);\n        if (cached) {\n            // If stale, trigger background refresh but return cached data\n            if (cached.isStale) {\n                // Background refresh (don't await)\n                fetchFn().then((freshData)=>cache.set(cacheKey, freshData, maxAge)).catch((error)=>console.error(`Background refresh failed for ${cacheKey}:`, error));\n            }\n            return {\n                data: cached.data,\n                cached: true,\n                stale: cached.isStale\n            };\n        }\n    }\n    // Fetch fresh data\n    try {\n        const data = await fetchFn();\n        cache.set(cacheKey, data, maxAge);\n        return {\n            data,\n            cached: false,\n            stale: false\n        };\n    } catch (error) {\n        // If fetch fails and we have stale cache, return it\n        const staleCache = cache.get(cacheKey);\n        if (staleCache) {\n            console.warn(`Fetch failed for ${cacheKey}, returning stale cache:`, error);\n            return {\n                data: staleCache.data,\n                cached: true,\n                stale: true\n            };\n        }\n        throw error;\n    }\n}\n// Background cleanup task (can be called periodically)\nsetInterval(()=>{\n    cache.cleanup();\n}, 10 * 60 * 1000); // Run cleanup every 10 minutes\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache.ts\n");

/***/ }),

/***/ "(rsc)/./lib/config.ts":
/*!***********************!*\
  !*** ./lib/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   gitHubConfig: () => (/* binding */ gitHubConfig),\n/* harmony export */   isGitHubEnabled: () => (/* binding */ isGitHubEnabled),\n/* harmony export */   isJiraEnabled: () => (/* binding */ isJiraEnabled),\n/* harmony export */   jiraConfig: () => (/* binding */ jiraConfig)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/errors.js\");\n\nconst integrationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    // Integration toggles\n    INTEGRATION_GITHUB: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"on\",\n        \"off\"\n    ]).default(\"off\"),\n    INTEGRATION_JIRA: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"on\",\n        \"off\"\n    ]).default(\"off\"),\n    // GitHub configuration\n    GITHUB_OWNER: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    GITHUB_REPO: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    GITHUB_TOKEN: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    // Jira configuration\n    JIRA_BASE_URL: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional(),\n    JIRA_EMAIL: zod__WEBPACK_IMPORTED_MODULE_0__.string().email().optional(),\n    JIRA_API_TOKEN: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    JIRA_PROJECT_KEY: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    // Environment\n    NODE_ENV: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"development\",\n        \"production\",\n        \"test\"\n    ]).default(\"development\")\n});\nfunction validateEnvironment() {\n    try {\n        const env = integrationSchema.parse(process.env);\n        // Validate GitHub configuration when enabled\n        if (env.INTEGRATION_GITHUB === \"on\") {\n            if (!env.GITHUB_OWNER || !env.GITHUB_REPO || !env.GITHUB_TOKEN) {\n                throw new Error(\"GitHub integration enabled but missing required variables: GITHUB_OWNER, GITHUB_REPO, GITHUB_TOKEN\");\n            }\n        }\n        // Validate Jira configuration when enabled\n        if (env.INTEGRATION_JIRA === \"on\") {\n            if (!env.JIRA_BASE_URL || !env.JIRA_EMAIL || !env.JIRA_API_TOKEN || !env.JIRA_PROJECT_KEY) {\n                throw new Error(\"Jira integration enabled but missing required variables: JIRA_BASE_URL, JIRA_EMAIL, JIRA_API_TOKEN, JIRA_PROJECT_KEY\");\n            }\n        }\n        return env;\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            const errorMessage = error.errors.map((err)=>`${err.path.join(\".\")}: ${err.message}`).join(\", \");\n            throw new Error(`Environment validation failed: ${errorMessage}`);\n        }\n        throw error;\n    }\n}\nconst config = validateEnvironment();\nconst isGitHubEnabled = config.INTEGRATION_GITHUB === \"on\";\nconst isJiraEnabled = config.INTEGRATION_JIRA === \"on\";\nconst gitHubConfig = isGitHubEnabled ? {\n    owner: config.GITHUB_OWNER,\n    repo: config.GITHUB_REPO,\n    token: config.GITHUB_TOKEN,\n    baseUrl: \"https://api.github.com\"\n} : null;\nconst jiraConfig = isJiraEnabled ? {\n    baseUrl: config.JIRA_BASE_URL,\n    email: config.JIRA_EMAIL,\n    apiToken: config.JIRA_API_TOKEN,\n    projectKey: config.JIRA_PROJECT_KEY\n} : null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBd0I7QUFFeEIsTUFBTUMsb0JBQW9CRCx1Q0FBUSxDQUFDO0lBQ2pDLHNCQUFzQjtJQUN0Qkcsb0JBQW9CSCx3Q0FBTSxDQUFDO1FBQUM7UUFBTTtLQUFNLEVBQUVLLE9BQU8sQ0FBQztJQUNsREMsa0JBQWtCTix3Q0FBTSxDQUFDO1FBQUM7UUFBTTtLQUFNLEVBQUVLLE9BQU8sQ0FBQztJQUVoRCx1QkFBdUI7SUFDdkJFLGNBQWNQLHVDQUFRLEdBQUdTLFFBQVE7SUFDakNDLGFBQWFWLHVDQUFRLEdBQUdTLFFBQVE7SUFDaENFLGNBQWNYLHVDQUFRLEdBQUdTLFFBQVE7SUFFakMscUJBQXFCO0lBQ3JCRyxlQUFlWix1Q0FBUSxHQUFHYSxHQUFHLEdBQUdKLFFBQVE7SUFDeENLLFlBQVlkLHVDQUFRLEdBQUdlLEtBQUssR0FBR04sUUFBUTtJQUN2Q08sZ0JBQWdCaEIsdUNBQVEsR0FBR1MsUUFBUTtJQUNuQ1Esa0JBQWtCakIsdUNBQVEsR0FBR1MsUUFBUTtJQUVyQyxjQUFjO0lBQ2RTLFVBQVVsQix3Q0FBTSxDQUFDO1FBQUM7UUFBZTtRQUFjO0tBQU8sRUFBRUssT0FBTyxDQUFDO0FBQ2xFO0FBRUEsU0FBU2M7SUFDUCxJQUFJO1FBQ0YsTUFBTUMsTUFBTW5CLGtCQUFrQm9CLEtBQUssQ0FBQ0MsUUFBUUYsR0FBRztRQUUvQyw2Q0FBNkM7UUFDN0MsSUFBSUEsSUFBSWpCLGtCQUFrQixLQUFLLE1BQU07WUFDbkMsSUFBSSxDQUFDaUIsSUFBSWIsWUFBWSxJQUFJLENBQUNhLElBQUlWLFdBQVcsSUFBSSxDQUFDVSxJQUFJVCxZQUFZLEVBQUU7Z0JBQzlELE1BQU0sSUFBSVksTUFDUjtZQUVKO1FBQ0Y7UUFFQSwyQ0FBMkM7UUFDM0MsSUFBSUgsSUFBSWQsZ0JBQWdCLEtBQUssTUFBTTtZQUNqQyxJQUFJLENBQUNjLElBQUlSLGFBQWEsSUFBSSxDQUFDUSxJQUFJTixVQUFVLElBQUksQ0FBQ00sSUFBSUosY0FBYyxJQUFJLENBQUNJLElBQUlILGdCQUFnQixFQUFFO2dCQUN6RixNQUFNLElBQUlNLE1BQ1I7WUFFSjtRQUNGO1FBRUEsT0FBT0g7SUFDVCxFQUFFLE9BQU9JLE9BQU87UUFDZCxJQUFJQSxpQkFBaUJ4Qix5Q0FBVSxFQUFFO1lBQy9CLE1BQU0wQixlQUFlRixNQUFNRyxNQUFNLENBQzlCQyxHQUFHLENBQUNDLENBQUFBLE1BQU8sQ0FBQyxFQUFFQSxJQUFJQyxJQUFJLENBQUNDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRUYsSUFBSUcsT0FBTyxDQUFDLENBQUMsRUFDbERELElBQUksQ0FBQztZQUNSLE1BQU0sSUFBSVIsTUFBTSxDQUFDLCtCQUErQixFQUFFRyxhQUFhLENBQUM7UUFDbEU7UUFDQSxNQUFNRjtJQUNSO0FBQ0Y7QUFFTyxNQUFNUyxTQUFTZCxzQkFBc0I7QUFFckMsTUFBTWUsa0JBQWtCRCxPQUFPOUIsa0JBQWtCLEtBQUssS0FBSztBQUMzRCxNQUFNZ0MsZ0JBQWdCRixPQUFPM0IsZ0JBQWdCLEtBQUssS0FBSztBQUV2RCxNQUFNOEIsZUFBZUYsa0JBQ3hCO0lBQ0VHLE9BQU9KLE9BQU8xQixZQUFZO0lBQzFCK0IsTUFBTUwsT0FBT3ZCLFdBQVc7SUFDeEI2QixPQUFPTixPQUFPdEIsWUFBWTtJQUMxQjZCLFNBQVM7QUFDWCxJQUNBLEtBQUs7QUFFRixNQUFNQyxhQUFhTixnQkFDdEI7SUFDRUssU0FBU1AsT0FBT3JCLGFBQWE7SUFDN0JHLE9BQU9rQixPQUFPbkIsVUFBVTtJQUN4QjRCLFVBQVVULE9BQU9qQixjQUFjO0lBQy9CMkIsWUFBWVYsT0FBT2hCLGdCQUFnQjtBQUNyQyxJQUNBLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZpbmctc3BlYy1kYXNoYm9hcmQvLi9saWIvY29uZmlnLnRzPzEyODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmNvbnN0IGludGVncmF0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICAvLyBJbnRlZ3JhdGlvbiB0b2dnbGVzXG4gIElOVEVHUkFUSU9OX0dJVEhVQjogei5lbnVtKFsnb24nLCAnb2ZmJ10pLmRlZmF1bHQoJ29mZicpLFxuICBJTlRFR1JBVElPTl9KSVJBOiB6LmVudW0oWydvbicsICdvZmYnXSkuZGVmYXVsdCgnb2ZmJyksXG4gIFxuICAvLyBHaXRIdWIgY29uZmlndXJhdGlvblxuICBHSVRIVUJfT1dORVI6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgR0lUSFVCX1JFUE86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgR0lUSFVCX1RPS0VOOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBKaXJhIGNvbmZpZ3VyYXRpb25cbiAgSklSQV9CQVNFX1VSTDogei5zdHJpbmcoKS51cmwoKS5vcHRpb25hbCgpLFxuICBKSVJBX0VNQUlMOiB6LnN0cmluZygpLmVtYWlsKCkub3B0aW9uYWwoKSxcbiAgSklSQV9BUElfVE9LRU46IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgSklSQV9QUk9KRUNUX0tFWTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBcbiAgLy8gRW52aXJvbm1lbnRcbiAgTk9ERV9FTlY6IHouZW51bShbJ2RldmVsb3BtZW50JywgJ3Byb2R1Y3Rpb24nLCAndGVzdCddKS5kZWZhdWx0KCdkZXZlbG9wbWVudCcpLFxufSk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRW52aXJvbm1lbnQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW52ID0gaW50ZWdyYXRpb25TY2hlbWEucGFyc2UocHJvY2Vzcy5lbnYpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIEdpdEh1YiBjb25maWd1cmF0aW9uIHdoZW4gZW5hYmxlZFxuICAgIGlmIChlbnYuSU5URUdSQVRJT05fR0lUSFVCID09PSAnb24nKSB7XG4gICAgICBpZiAoIWVudi5HSVRIVUJfT1dORVIgfHwgIWVudi5HSVRIVUJfUkVQTyB8fCAhZW52LkdJVEhVQl9UT0tFTikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0dpdEh1YiBpbnRlZ3JhdGlvbiBlbmFibGVkIGJ1dCBtaXNzaW5nIHJlcXVpcmVkIHZhcmlhYmxlczogR0lUSFVCX09XTkVSLCBHSVRIVUJfUkVQTywgR0lUSFVCX1RPS0VOJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBKaXJhIGNvbmZpZ3VyYXRpb24gd2hlbiBlbmFibGVkXG4gICAgaWYgKGVudi5JTlRFR1JBVElPTl9KSVJBID09PSAnb24nKSB7XG4gICAgICBpZiAoIWVudi5KSVJBX0JBU0VfVVJMIHx8ICFlbnYuSklSQV9FTUFJTCB8fCAhZW52LkpJUkFfQVBJX1RPS0VOIHx8ICFlbnYuSklSQV9QUk9KRUNUX0tFWSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ppcmEgaW50ZWdyYXRpb24gZW5hYmxlZCBidXQgbWlzc2luZyByZXF1aXJlZCB2YXJpYWJsZXM6IEpJUkFfQkFTRV9VUkwsIEpJUkFfRU1BSUwsIEpJUkFfQVBJX1RPS0VOLCBKSVJBX1BST0pFQ1RfS0VZJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZW52O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yLmVycm9yc1xuICAgICAgICAubWFwKGVyciA9PiBgJHtlcnIucGF0aC5qb2luKCcuJyl9OiAke2Vyci5tZXNzYWdlfWApXG4gICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbnZpcm9ubWVudCB2YWxpZGF0aW9uIGZhaWxlZDogJHtlcnJvck1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB2YWxpZGF0ZUVudmlyb25tZW50KCk7XG5cbmV4cG9ydCBjb25zdCBpc0dpdEh1YkVuYWJsZWQgPSBjb25maWcuSU5URUdSQVRJT05fR0lUSFVCID09PSAnb24nO1xuZXhwb3J0IGNvbnN0IGlzSmlyYUVuYWJsZWQgPSBjb25maWcuSU5URUdSQVRJT05fSklSQSA9PT0gJ29uJztcblxuZXhwb3J0IGNvbnN0IGdpdEh1YkNvbmZpZyA9IGlzR2l0SHViRW5hYmxlZFxuICA/IHtcbiAgICAgIG93bmVyOiBjb25maWcuR0lUSFVCX09XTkVSISxcbiAgICAgIHJlcG86IGNvbmZpZy5HSVRIVUJfUkVQTyEsXG4gICAgICB0b2tlbjogY29uZmlnLkdJVEhVQl9UT0tFTiEsXG4gICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbScsXG4gICAgfVxuICA6IG51bGw7XG5cbmV4cG9ydCBjb25zdCBqaXJhQ29uZmlnID0gaXNKaXJhRW5hYmxlZFxuICA/IHtcbiAgICAgIGJhc2VVcmw6IGNvbmZpZy5KSVJBX0JBU0VfVVJMISxcbiAgICAgIGVtYWlsOiBjb25maWcuSklSQV9FTUFJTCEsXG4gICAgICBhcGlUb2tlbjogY29uZmlnLkpJUkFfQVBJX1RPS0VOISxcbiAgICAgIHByb2plY3RLZXk6IGNvbmZpZy5KSVJBX1BST0pFQ1RfS0VZISxcbiAgICB9XG4gIDogbnVsbDtcblxuZXhwb3J0IHR5cGUgR2l0SHViQ29uZmlnID0gTm9uTnVsbGFibGU8dHlwZW9mIGdpdEh1YkNvbmZpZz47XG5leHBvcnQgdHlwZSBKaXJhQ29uZmlnID0gTm9uTnVsbGFibGU8dHlwZW9mIGppcmFDb25maWc+OyJdLCJuYW1lcyI6WyJ6IiwiaW50ZWdyYXRpb25TY2hlbWEiLCJvYmplY3QiLCJJTlRFR1JBVElPTl9HSVRIVUIiLCJlbnVtIiwiZGVmYXVsdCIsIklOVEVHUkFUSU9OX0pJUkEiLCJHSVRIVUJfT1dORVIiLCJzdHJpbmciLCJvcHRpb25hbCIsIkdJVEhVQl9SRVBPIiwiR0lUSFVCX1RPS0VOIiwiSklSQV9CQVNFX1VSTCIsInVybCIsIkpJUkFfRU1BSUwiLCJlbWFpbCIsIkpJUkFfQVBJX1RPS0VOIiwiSklSQV9QUk9KRUNUX0tFWSIsIk5PREVfRU5WIiwidmFsaWRhdGVFbnZpcm9ubWVudCIsImVudiIsInBhcnNlIiwicHJvY2VzcyIsIkVycm9yIiwiZXJyb3IiLCJab2RFcnJvciIsImVycm9yTWVzc2FnZSIsImVycm9ycyIsIm1hcCIsImVyciIsInBhdGgiLCJqb2luIiwibWVzc2FnZSIsImNvbmZpZyIsImlzR2l0SHViRW5hYmxlZCIsImlzSmlyYUVuYWJsZWQiLCJnaXRIdWJDb25maWciLCJvd25lciIsInJlcG8iLCJ0b2tlbiIsImJhc2VVcmwiLCJqaXJhQ29uZmlnIiwiYXBpVG9rZW4iLCJwcm9qZWN0S2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/integrations/github.ts":
/*!************************************!*\
  !*** ./lib/integrations/github.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigurationError: () => (/* binding */ ConfigurationError),\n/* harmony export */   GitHubIntegration: () => (/* binding */ GitHubIntegration),\n/* harmony export */   github: () => (/* binding */ github)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(rsc)/./lib/config.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cache */ \"(rsc)/./lib/cache.ts\");\n/* harmony import */ var _rateLimit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../rateLimit */ \"(rsc)/./lib/rateLimit.ts\");\n\n\n\nclass ConfigurationError extends Error {\n    constructor(integration, message, statusCode, retryAfter){\n        super(message);\n        this.integration = integration;\n        this.statusCode = statusCode;\n        this.retryAfter = retryAfter;\n        this.name = \"ConfigurationError\";\n    }\n}\nclass GitHubIntegration {\n    constructor(){\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.gitHubConfig) {\n            throw new ConfigurationError(\"github\", \"GitHub integration not properly configured\");\n        }\n        this.baseUrl = _config__WEBPACK_IMPORTED_MODULE_0__.gitHubConfig.baseUrl;\n        this.owner = _config__WEBPACK_IMPORTED_MODULE_0__.gitHubConfig.owner;\n        this.repo = _config__WEBPACK_IMPORTED_MODULE_0__.gitHubConfig.repo;\n        this.token = _config__WEBPACK_IMPORTED_MODULE_0__.gitHubConfig.token;\n    }\n    async fetchFromGitHub(endpoint, params = {}) {\n        // Check rate limit before making request\n        const rateLimitResult = (0,_rateLimit__WEBPACK_IMPORTED_MODULE_2__.checkRateLimit)(\"github\", \"server\");\n        if (!rateLimitResult.allowed) {\n            throw new ConfigurationError(\"github\", \"GitHub API rate limit exceeded\", 429, rateLimitResult.resetTime);\n        }\n        const url = new URL(`${this.baseUrl}/repos/${this.owner}/${this.repo}${endpoint}`);\n        // Add query parameters\n        Object.entries(params).forEach(([key, value])=>{\n            url.searchParams.append(key, value.toString());\n        });\n        const response = await fetch(url.toString(), {\n            headers: {\n                \"Authorization\": `token ${this.token}`,\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"User-Agent\": \"living-spec-dashboard/1.0.0\"\n            },\n            timeout: 10000\n        });\n        if (!response.ok) {\n            if (response.status === 403) {\n                throw new ConfigurationError(\"github\", \"GitHub API rate limit exceeded or insufficient permissions\", 403);\n            }\n            if (response.status === 401) {\n                throw new ConfigurationError(\"github\", \"GitHub API authentication failed - check your token\", 401);\n            }\n            if (response.status === 404) {\n                throw new ConfigurationError(\"github\", `GitHub repository ${this.owner}/${this.repo} not found`, 404);\n            }\n            throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async getCommits(limit = 50) {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled) {\n            throw new ConfigurationError(\"github\", \"GitHub integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"github:commits\", {\n            owner: this.owner,\n            repo: this.repo,\n            limit\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromGitHub(\"/commits\", {\n                per_page: limit\n            }), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.commits);\n        return result.data;\n    }\n    async getReleases(limit = 20) {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled) {\n            throw new ConfigurationError(\"github\", \"GitHub integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"github:releases\", {\n            owner: this.owner,\n            repo: this.repo,\n            limit\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromGitHub(\"/releases\", {\n                per_page: limit\n            }), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.releases);\n        return result.data;\n    }\n    async getMilestones() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled) {\n            throw new ConfigurationError(\"github\", \"GitHub integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"github:milestones\", {\n            owner: this.owner,\n            repo: this.repo\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromGitHub(\"/milestones\", {\n                state: \"all\",\n                sort: \"due_on\",\n                direction: \"desc\"\n            }), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.milestones);\n        return result.data;\n    }\n    async getRepositoryInfo() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled) {\n            throw new ConfigurationError(\"github\", \"GitHub integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"github:repo\", {\n            owner: this.owner,\n            repo: this.repo\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromGitHub(\"\"), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.releases // Use same cache duration as releases\n        );\n        return result.data;\n    }\n    // Check if GitHub integration is healthy\n    async healthCheck() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled) {\n            return {\n                status: \"unhealthy\",\n                message: \"GitHub integration disabled\"\n            };\n        }\n        try {\n            await this.fetchFromGitHub(\"\", {});\n            return {\n                status: \"healthy\",\n                message: \"GitHub API accessible\"\n            };\n        } catch (error) {\n            if (error instanceof ConfigurationError) {\n                if (error.statusCode === 403) {\n                    return {\n                        status: \"degraded\",\n                        message: \"GitHub API rate limited\"\n                    };\n                }\n                if (error.statusCode === 401) {\n                    return {\n                        status: \"unhealthy\",\n                        message: \"GitHub authentication failed\"\n                    };\n                }\n                if (error.statusCode === 404) {\n                    return {\n                        status: \"unhealthy\",\n                        message: \"GitHub repository not found\"\n                    };\n                }\n            }\n            return {\n                status: \"degraded\",\n                message: \"GitHub API temporarily unavailable\"\n            };\n        }\n    }\n}\n// Export singleton instance\nconst github = _config__WEBPACK_IMPORTED_MODULE_0__.isGitHubEnabled ? new GitHubIntegration() : null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/integrations/github.ts\n");

/***/ }),

/***/ "(rsc)/./lib/integrations/jira.ts":
/*!**********************************!*\
  !*** ./lib/integrations/jira.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JiraIntegration: () => (/* binding */ JiraIntegration),\n/* harmony export */   jira: () => (/* binding */ jira)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(rsc)/./lib/config.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cache */ \"(rsc)/./lib/cache.ts\");\n/* harmony import */ var _rateLimit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../rateLimit */ \"(rsc)/./lib/rateLimit.ts\");\n/* harmony import */ var _github__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./github */ \"(rsc)/./lib/integrations/github.ts\");\n\n\n\n\nclass JiraIntegration {\n    constructor(){\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.jiraConfig) {\n            throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira integration not properly configured\");\n        }\n        this.baseUrl = _config__WEBPACK_IMPORTED_MODULE_0__.jiraConfig.baseUrl;\n        this.email = _config__WEBPACK_IMPORTED_MODULE_0__.jiraConfig.email;\n        this.apiToken = _config__WEBPACK_IMPORTED_MODULE_0__.jiraConfig.apiToken;\n        this.projectKey = _config__WEBPACK_IMPORTED_MODULE_0__.jiraConfig.projectKey;\n    }\n    async fetchFromJira(endpoint, options = {}) {\n        // Check rate limit before making request\n        const rateLimitResult = (0,_rateLimit__WEBPACK_IMPORTED_MODULE_2__.checkRateLimit)(\"jira\", \"server\");\n        if (!rateLimitResult.allowed) {\n            throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira API rate limit exceeded\", 429, rateLimitResult.resetTime);\n        }\n        const url = new URL(`${this.baseUrl}/rest/api/3${endpoint}`);\n        // Add query parameters\n        if (options.params) {\n            Object.entries(options.params).forEach(([key, value])=>{\n                url.searchParams.append(key, value.toString());\n            });\n        }\n        // Create basic auth header\n        const auth = Buffer.from(`${this.email}:${this.apiToken}`).toString(\"base64\");\n        const response = await fetch(url.toString(), {\n            method: options.method || \"GET\",\n            headers: {\n                \"Authorization\": `Basic ${auth}`,\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"User-Agent\": \"living-spec-dashboard/1.0.0\"\n            },\n            body: options.body ? JSON.stringify(options.body) : undefined,\n            timeout: 10000\n        });\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira API authentication failed - check your email and API token\", 401);\n            }\n            if (response.status === 403) {\n                throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira API access forbidden - check your permissions\", 403);\n            }\n            if (response.status === 404) {\n                throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", `Jira project ${this.projectKey} not found`, 404);\n            }\n            if (response.status === 429) {\n                throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira API rate limit exceeded\", 429);\n            }\n            throw new Error(`Jira API error: ${response.status} ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async searchIssues(jql, maxResults = 50, startAt = 0) {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isJiraEnabled) {\n            throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"jira:search\", {\n            jql,\n            maxResults,\n            startAt\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromJira(\"/search\", {\n                method: \"POST\",\n                body: {\n                    jql,\n                    maxResults,\n                    startAt,\n                    fields: [\n                        \"summary\",\n                        \"description\",\n                        \"status\",\n                        \"priority\",\n                        \"assignee\",\n                        \"reporter\",\n                        \"created\",\n                        \"updated\",\n                        \"resolutiondate\",\n                        \"timeestimate\",\n                        \"timeoriginalestimate\",\n                        \"timespent\",\n                        \"labels\",\n                        \"components\"\n                    ]\n                }\n            }), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.jira);\n        return result.data;\n    }\n    async getActiveIssues(limit = 50) {\n        const jql = `project = ${this.projectKey} AND statusCategory != Done ORDER BY priority DESC, created DESC`;\n        const response = await this.searchIssues(jql, limit);\n        return response.issues;\n    }\n    async getRecentIssues(days = 30, limit = 50) {\n        const jql = `project = ${this.projectKey} AND created >= -${days}d ORDER BY created DESC`;\n        const response = await this.searchIssues(jql, limit);\n        return response.issues;\n    }\n    async getIssuesByStatus(status, limit = 50) {\n        const jql = `project = ${this.projectKey} AND status = \"${status}\" ORDER BY priority DESC`;\n        const response = await this.searchIssues(jql, limit);\n        return response.issues;\n    }\n    async getIssuesByAssignee(assignee, limit = 50) {\n        const jql = `project = ${this.projectKey} AND assignee = \"${assignee}\" AND statusCategory != Done ORDER BY priority DESC`;\n        const response = await this.searchIssues(jql, limit);\n        return response.issues;\n    }\n    async getProjectInfo() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isJiraEnabled) {\n            throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"jira:project\", {\n            projectKey: this.projectKey\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, ()=>this.fetchFromJira(`/project/${this.projectKey}`), _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.releases // Use same cache duration as releases (15 minutes)\n        );\n        return result.data;\n    }\n    async getProjectStatistics() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isJiraEnabled) {\n            throw new _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError(\"jira\", \"Jira integration is disabled\");\n        }\n        const cacheKey = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.generateCacheKey)(\"jira:stats\", {\n            projectKey: this.projectKey\n        });\n        const result = await (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(cacheKey, async ()=>{\n            const [total, open, inProgress, done, blocked] = await Promise.all([\n                this.searchIssues(`project = ${this.projectKey}`, 1),\n                this.searchIssues(`project = ${this.projectKey} AND statusCategory = \"To Do\"`, 1),\n                this.searchIssues(`project = ${this.projectKey} AND statusCategory = \"In Progress\"`, 1),\n                this.searchIssues(`project = ${this.projectKey} AND statusCategory = Done`, 1),\n                this.searchIssues(`project = ${this.projectKey} AND labels = \"blocked\"`, 1)\n            ]);\n            return {\n                totalIssues: total.total,\n                openIssues: open.total,\n                inProgressIssues: inProgress.total,\n                doneIssues: done.total,\n                blockedIssues: blocked.total\n            };\n        }, _cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_DURATION.jira);\n        return result.data;\n    }\n    // Check if Jira integration is healthy\n    async healthCheck() {\n        if (!_config__WEBPACK_IMPORTED_MODULE_0__.isJiraEnabled) {\n            return {\n                status: \"unhealthy\",\n                message: \"Jira integration disabled\"\n            };\n        }\n        try {\n            await this.getProjectInfo();\n            return {\n                status: \"healthy\",\n                message: \"Jira API accessible\"\n            };\n        } catch (error) {\n            if (error instanceof _github__WEBPACK_IMPORTED_MODULE_3__.ConfigurationError) {\n                if (error.statusCode === 401) {\n                    return {\n                        status: \"unhealthy\",\n                        message: \"Jira authentication failed\"\n                    };\n                }\n                if (error.statusCode === 403) {\n                    return {\n                        status: \"unhealthy\",\n                        message: \"Jira access forbidden\"\n                    };\n                }\n                if (error.statusCode === 404) {\n                    return {\n                        status: \"unhealthy\",\n                        message: \"Jira project not found\"\n                    };\n                }\n                if (error.statusCode === 429) {\n                    return {\n                        status: \"degraded\",\n                        message: \"Jira API rate limited\"\n                    };\n                }\n            }\n            return {\n                status: \"degraded\",\n                message: \"Jira API temporarily unavailable\"\n            };\n        }\n    }\n}\n// Export singleton instance\nconst jira = _config__WEBPACK_IMPORTED_MODULE_0__.isJiraEnabled ? new JiraIntegration() : null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/integrations/jira.ts\n");

/***/ }),

/***/ "(rsc)/./lib/rateLimit.ts":
/*!**************************!*\
  !*** ./lib/rateLimit.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RATE_LIMIT_CONFIGS: () => (/* binding */ RATE_LIMIT_CONFIGS),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   createRateLimitErrorResponse: () => (/* binding */ createRateLimitErrorResponse),\n/* harmony export */   getRateLimitStats: () => (/* binding */ getRateLimitStats),\n/* harmony export */   rateLimitMiddleware: () => (/* binding */ rateLimitMiddleware)\n/* harmony export */ });\nclass RateLimitStore {\n    generateKey(identifier, ip) {\n        return `${identifier}:${ip}`;\n    }\n    increment(identifier, ip, windowMs) {\n        const key = this.generateKey(identifier, ip);\n        const now = Date.now();\n        const entry = this.store.get(key);\n        if (!entry || now > entry.resetTime) {\n            // Create new entry or reset expired entry\n            const newEntry = {\n                count: 1,\n                resetTime: now + windowMs\n            };\n            this.store.set(key, newEntry);\n            console.log(`[DEBUG] [RateLimit] Rate limit configured`, {\n                identifier,\n                config: {\n                    maxRequests: \"N/A\",\n                    windowMs\n                }\n            });\n            return newEntry;\n        }\n        // Increment existing entry\n        entry.count++;\n        this.store.set(key, entry);\n        return entry;\n    }\n    cleanup() {\n        const now = Date.now();\n        for (const [key, entry] of this.store.entries()){\n            if (now > entry.resetTime) {\n                this.store.delete(key);\n            }\n        }\n    }\n    stats() {\n        return {\n            totalKeys: this.store.size,\n            entries: Array.from(this.store.entries()).map(([key, entry])=>({\n                    key,\n                    count: entry.count,\n                    resetTime: entry.resetTime\n                }))\n        };\n    }\n    constructor(){\n        this.store = new Map();\n    }\n}\nconst rateLimitStore = new RateLimitStore();\n// Default rate limit configurations\nconst RATE_LIMIT_CONFIGS = {\n    github: {\n        maxRequests: 5000,\n        windowMs: 60 * 60 * 1000\n    },\n    jira: {\n        maxRequests: 100,\n        windowMs: 60 * 1000\n    },\n    \"api:github\": {\n        maxRequests: 30,\n        windowMs: 60 * 1000\n    },\n    \"api:jira\": {\n        maxRequests: 20,\n        windowMs: 60 * 1000\n    },\n    \"api:health\": {\n        maxRequests: 60,\n        windowMs: 60 * 1000\n    }\n};\nfunction checkRateLimit(identifier, ip, config) {\n    const defaultConfig = RATE_LIMIT_CONFIGS[identifier];\n    const finalConfig = {\n        ...defaultConfig,\n        ...config,\n        identifier\n    };\n    if (!finalConfig.maxRequests || !finalConfig.windowMs) {\n        throw new Error(`Rate limit configuration not found for identifier: ${identifier}`);\n    }\n    console.log(`[DEBUG] [RateLimit] Rate limit configured`, {\n        identifier,\n        config: finalConfig\n    });\n    const entry = rateLimitStore.increment(identifier, ip, finalConfig.windowMs);\n    return {\n        allowed: entry.count <= finalConfig.maxRequests,\n        limit: finalConfig.maxRequests,\n        remaining: Math.max(0, finalConfig.maxRequests - entry.count),\n        resetTime: entry.resetTime\n    };\n}\n// Middleware function for Next.js API routes\nfunction rateLimitMiddleware(identifier, config) {\n    return (req)=>{\n        // Extract IP from request (considering various proxy headers)\n        const forwardedFor = req.headers.get(\"x-forwarded-for\");\n        const realIp = req.headers.get(\"x-real-ip\");\n        const ip = forwardedFor?.split(\",\")[0] || realIp || \"127.0.0.1\";\n        const result = checkRateLimit(identifier, ip, config);\n        const headers = {\n            \"X-RateLimit-Limit\": result.limit.toString(),\n            \"X-RateLimit-Remaining\": result.remaining.toString(),\n            \"X-RateLimit-Reset\": new Date(result.resetTime).toISOString()\n        };\n        if (!result.allowed) {\n            headers[\"Retry-After\"] = Math.ceil((result.resetTime - Date.now()) / 1000).toString();\n        }\n        return {\n            allowed: result.allowed,\n            headers\n        };\n    };\n}\n// Error class for rate limit exceeded\nclass RateLimitError extends Error {\n    constructor(message, retryAfter, limit, resetTime){\n        super(message);\n        this.retryAfter = retryAfter;\n        this.limit = limit;\n        this.resetTime = resetTime;\n        this.name = \"RateLimitError\";\n    }\n}\n// Helper function to create rate limit error response\nfunction createRateLimitErrorResponse(result) {\n    const retryAfter = Math.ceil((result.resetTime - Date.now()) / 1000);\n    return new Response(JSON.stringify({\n        error: \"Rate limit exceeded\",\n        message: `Too many requests. Limit: ${result.limit} requests. Try again in ${retryAfter} seconds.`,\n        retryAfter,\n        resetTime: new Date(result.resetTime).toISOString()\n    }), {\n        status: 429,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-RateLimit-Limit\": result.limit.toString(),\n            \"X-RateLimit-Remaining\": \"0\",\n            \"X-RateLimit-Reset\": new Date(result.resetTime).toISOString(),\n            \"Retry-After\": retryAfter.toString()\n        }\n    });\n}\n// Cleanup task - run periodically to remove expired entries\nsetInterval(()=>{\n    rateLimitStore.cleanup();\n}, 5 * 60 * 1000); // Run cleanup every 5 minutes\n// Debug function to get rate limit stats\nfunction getRateLimitStats() {\n    return rateLimitStore.stats();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/rateLimit.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/zod","vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjira%2Fissues%2Froute&page=%2Fapi%2Fjira%2Fissues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjira%2Fissues%2Froute.ts&appDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmandymarigjervikrygg%2FDesktop%2Fdev-memory-os-starter%2Fliving-spec-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();