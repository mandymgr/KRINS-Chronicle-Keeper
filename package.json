{
  "name": "krins-chronicle-keeper",
  "version": "2.0.0",
  "description": "ðŸ§  KRINS Chronicle Keeper - Revolutionary Organizational Intelligence System with Complete AI Team Integration",
  "private": true,
  "workspaces": [
    "AI_INTEGRATION/*",
    "backend/*",
    "frontend/*",
    "tools/*",
    "mcp-ai-team",
    "semantic-search-backend",
    "ai-pattern-bridge",
    "github-webhook-handler"
  ],
  "main": "index.js",
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "dev": "node scripts/dev-orchestrator.js start",
    "dev:legacy": "concurrently \"bun run dev:backend\" \"bun run dev:frontend\" \"docker-compose up postgres redis -d\"",
    "dev:backend": "cd backend && uvicorn main:app --reload --host 0.0.0.0 --port 8000",
    "dev:frontend": "cd frontend && bun run dev",
    "dev:containers": "docker-compose up postgres redis -d",
    "dev:watch": "docker-compose watch",
    "build": "node scripts/build-all-systems.js",
    "build:legacy": "bun run build:frontend && bun run build:backend",
    "build:frontend": "cd frontend && bun install && bun run build",
    "build:backend": "cd backend && pip install -r requirements.txt",
    "start": "docker-compose up --build",
    "start:production": "NODE_ENV=production docker-compose -f docker-compose.yml -f docker-compose.prod.yml up",
    "stop": "docker-compose down",
    "db:up": "docker-compose up postgres redis -d",
    "db:down": "docker-compose stop postgres redis",
    "db:reset": "docker-compose down -v && docker-compose up postgres redis -d",
    "migrate": "cd backend && python migrate.py",
    "migrate:reset": "cd backend && python migrate.py --reset",
    "logs": "docker-compose logs -f",
    "logs:api": "docker-compose logs -f fastapi",
    "logs:frontend": "docker-compose logs -f frontend",
    "test": "bun run test:decision-management && bun run test:ai-integration && bun run test:tools",
    "test:decision-management": "cd DECISION_MANAGEMENT && bun test",
    "test:ai-integration": "cd AI_INTEGRATION && bun test",
    "test:tools": "cd tools && bun test",
    "test:integration": "cd backend && python -m pytest tests/",
    "lint": "bun run lint:typescript && bun run lint:backend",
    "lint:typescript": "cd tools && bun run lint",
    "lint:backend": "cd backend && python -m flake8 .",
    "typecheck": "tsc --noEmit DECISION_MANAGEMENT/*.ts AI_INTEGRATION/*.ts --skipLibCheck --target ES2020 --module ESNext --moduleResolution node --allowSyntheticDefaultImports || true",
    "typecheck:decision-management": "tsc --noEmit DECISION_MANAGEMENT/*.ts --skipLibCheck --target ES2020 --module ESNext --moduleResolution node --allowSyntheticDefaultImports || true",
    "typecheck:ai-integration": "tsc --noEmit AI_INTEGRATION/*.ts --skipLibCheck --target ES2020 --module ESNext --moduleResolution node --allowSyntheticDefaultImports || true",
    "setup:semantic-search": "./scripts/setup-semantic-search.sh",
    "build:verify": "./scripts/build-and-verify.sh",
    "deploy:ai-team": "./scripts/deploy-ai-team.sh",
    "node:semantic-server": "node backend/node_backend/server.js",
    "dev:hybrid": "concurrently \"bun run dev:backend\" \"bun run dev:frontend\" \"bun run node:semantic-server\" \"docker-compose up postgres redis -d\"",
    "adr:new": "./tools/adr_new.sh",
    "decision:track": "bun DECISION_MANAGEMENT/decision-tracker.ts",
    "decision:analytics": "bun DECISION_MANAGEMENT/decision-tracker.ts analytics",
    "decision:report": "bun DECISION_MANAGEMENT/decision-tracker.ts report",
    "ai:context-legacy": "bun AI_INTEGRATION/context-provider.ts",
    "ai:parse": "bun AI_INTEGRATION/adr-parser.ts",
    "pattern:create": "node tools/create-pattern.js",
    "pattern:validate": "node tools/validate-patterns.js",
    "pattern:analytics": "node tools/pattern-analytics-engine.js",
    "ai:unified": "bun AI_INTEGRATION/unified-ai-launcher.js",
    "ai:demo": "bun AI_INTEGRATION/unified-ai-launcher.js demo",
    "ai:context": "bun AI_INTEGRATION/unified-ai-launcher.js context",
    "ai:status": "bun AI_INTEGRATION/unified-ai-launcher.js status",
    "krin:start": "bun AI_INTEGRATION/krin-companion/terminal-krin.js",
    "krin:companion": "bun AI_INTEGRATION/krin-companion/krin-agent.js",
    "krin:claude-code": "bun AI_INTEGRATION/krin-companion/load-krin-memories.js",
    "personality:test": "bun AI_INTEGRATION/personality-matcher/test-cli.js",
    "personality:generate": "bun AI_INTEGRATION/personality-matcher/generate-companion.js",
    "mcp:start": "bun AI_INTEGRATION/mcp-server.ts",
    "mcp:team": "node AI_INTEGRATION/mcp-team/src/mcp-server.js",
    "install:all": "bun install && bun run install:workspaces",
    "install:workspaces": "bun install --filter='AI_INTEGRATION/*' && bun install --filter='backend/*' && bun install --filter='frontend/*' && bun install --filter='tools/*'",
    "clean": "docker-compose down -v && docker system prune -f",
    "health": "docker compose ps && echo 'Database services status above' && bun run ai:status && echo 'AI system status above'",
    "dev:stop": "node scripts/dev-orchestrator.js stop",
    "dev:status": "node scripts/dev-orchestrator.js status",
    "dev:restart": "node scripts/dev-orchestrator.js restart",
    "dev:mcp": "node scripts/dev-orchestrator.js restart mcp-ai-team",
    "dev:search": "node scripts/dev-orchestrator.js restart semantic-search",
    "dev:bridge": "node scripts/dev-orchestrator.js restart ai-pattern-bridge",
    "dev:webhook": "node scripts/dev-orchestrator.js restart github-webhook",
    "install:ai-systems": "npm run install:mcp && npm run install:search && npm run install:bridge && npm run install:webhook",
    "install:mcp": "cd mcp-ai-team && npm install",
    "install:search": "cd semantic-search-backend && npm install", 
    "install:bridge": "cd ai-pattern-bridge && npm install",
    "install:webhook": "cd github-webhook-handler && npm install",
    "build:ai-systems": "npm run build:mcp && npm run build:search && npm run build:bridge && npm run build:webhook",
    "build:mcp": "cd mcp-ai-team && npm run build || echo 'MCP AI Team build completed'",
    "build:search": "cd semantic-search-backend && npm run build || echo 'Semantic Search build completed'",
    "build:bridge": "cd ai-pattern-bridge && npm run build || echo 'AI Pattern Bridge build completed'",
    "build:webhook": "cd github-webhook-handler && npm run build || echo 'GitHub Webhook Handler build completed'",
    "test:ai-systems": "npm run test:mcp && npm run test:search && npm run test:bridge && npm run test:webhook",
    "test:mcp": "cd mcp-ai-team && npm test || echo 'MCP AI Team tests completed'",
    "test:search": "cd semantic-search-backend && npm test || echo 'Semantic Search tests completed'",
    "test:bridge": "cd ai-pattern-bridge && npm test || echo 'AI Pattern Bridge tests completed'",
    "test:webhook": "cd github-webhook-handler && npm test || echo 'GitHub Webhook Handler tests completed'",
    "test:ai-coordination": "node scripts/test-ai-coordination.js",
    "ai:benchmark": "node scripts/benchmark-ai-systems.js",
    "ai:validate-patterns": "node scripts/validate-ai-patterns.js",
    "github:test-webhook": "node scripts/test-github-webhooks.js",
    "setup:complete": "npm install && npm run install:ai-systems && npm run build && npm run build:ai-systems && echo 'ðŸŽ‰ KRINS Chronicle Keeper v2.0 setup complete!'"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/krins-studio/KRINS-Chronicle-Keeper.git"
  },
  "keywords": [
    "organizational-intelligence",
    "decision-management",
    "adr",
    "ai-integration",
    "institutional-memory",
    "semantic-search",
    "decision-analytics",
    "pgvector",
    "fastapi",
    "react",
    "typescript",
    "bun"
  ],
  "author": "KRINS Studio - Advanced Organizational Intelligence",
  "license": "ISC",
  "type": "module",
  "bugs": {
    "url": "https://github.com/krins-studio/KRINS-Chronicle-Keeper/issues"
  },
  "homepage": "https://github.com/krins-studio/KRINS-Chronicle-Keeper#readme",
  "dependencies": {
    "@slack/bolt": "^3.14.0",
    "@octokit/rest": "^20.0.2",
    "openai": "^4.20.1",
    "dotenv": "^16.3.1",
    "commander": "^11.0.0",
    "chalk": "^5.3.0",
    "inquirer": "^9.2.0",
    "fs-extra": "^11.1.1",
    "glob": "^10.3.0",
    "yaml": "^2.3.2",
    "marked": "^7.0.0",
    "uuid": "^9.0.0",
    "pg": "^8.11.0",
    "sqlite3": "^5.1.7",
    "axios": "^1.7.7",
    "express": "^4.19.2",
    "moment": "^2.30.1",
    "concurrently": "^8.2.2"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/uuid": "^9.0.0",
    "@types/fs-extra": "^11.0.0",
    "typescript": "^5.0.2",
    "husky": "^8.0.3",
    "prettier": "^3.0.0",
    "eslint": "^8.45.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "bun": ">=1.0.0"
  },
  "peerDependencies": {
    "docker": ">=20.0.0",
    "docker-compose": ">=2.0.0"
  }
}