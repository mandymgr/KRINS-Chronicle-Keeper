# KRINS-Chronicle-Keeper - Advanced Organizational Intelligence Platform
# FastAPI + React + PostgreSQL with pgvector + Redis + AI Integration

services:
  # PostgreSQL Database with pgvector extension for semantic search
  postgres:
    image: pgvector/pgvector:pg16
    container_name: krins-chronicle-postgres
    environment:
      POSTGRES_DB: krins_chronicle
      POSTGRES_USER: krinschron
      POSTGRES_PASSWORD: krins_chronicle_secure_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U krinschron -d krins_chronicle"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - krins-network
    restart: unless-stopped

  # Redis for caching, job queues, and AI coordination
  redis:
    image: redis:7-alpine
    container_name: krins-chronicle-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass krins_redis_2025
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - krins-network
    restart: unless-stopped

  # FastAPI Backend Server with Decision Intelligence
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: krins-chronicle-fastapi
    environment:
      # Database settings
      DATABASE_URL: postgresql+asyncpg://krinschron:krins_chronicle_secure_2025@postgres:5432/krins_chronicle
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: krinschron
      DB_PASSWORD: krins_chronicle_secure_2025
      DB_NAME: krins_chronicle
      
      # Redis settings
      REDIS_URL: redis://:krins_redis_2025@redis:6379/0
      
      # OpenAI settings (provide your own key)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: text-embedding-3-small
      
      # Application settings
      DEBUG: true
      LOG_LEVEL: INFO
      PROJECT_NAME: "KRINS Chronicle Keeper API"
      VERSION: "1.0.0"
      
      # CORS settings
      BACKEND_CORS_ORIGINS: "http://localhost:3000,http://localhost:3001,http://frontend:3000"
      
      # Performance settings
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 5
      EMBEDDING_BATCH_SIZE: 10
      
      # Chronicle Keeper specific settings
      ADR_DIRECTORY: "/app/docs/adr"
      PATTERNS_DIRECTORY: "/app/docs/patterns"
      RUNBOOKS_DIRECTORY: "/app/docs/runbooks"
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./docs:/app/docs  # Mount docs directory for ADR access
      - ./DECISION_MANAGEMENT:/app/decision_management
      - ./AI_INTEGRATION:/app/ai_integration
      - ./tools:/app/tools
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - krins-network
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"

  # React Frontend Application with Decision Visualization
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: krins-chronicle-frontend
    environment:
      VITE_API_URL: http://localhost:8000/api/v1
      VITE_WS_URL: ws://localhost:8000/ws
      NODE_ENV: development
      VITE_PROJECT_NAME: "KRINS Chronicle Keeper"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent node_modules override
    depends_on:
      fastapi:
        condition: service_healthy
    networks:
      - krins-network
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
            - dist/
            - .next/

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: krins-chronicle-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@krins-chronicle.com
      PGADMIN_DEFAULT_PASSWORD: krins_admin_2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - krins-network
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  krins-network:
    driver: bridge
    name: krins-network