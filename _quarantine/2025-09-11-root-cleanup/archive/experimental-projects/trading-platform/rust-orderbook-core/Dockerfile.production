# Multi-stage build for Rust WASM orderbook with maximum performance optimization
FROM rust:1.75-slim AS builder

LABEL maintainer="Krin & Mandy Revolutionary Trading System"
LABEL description="Production Rust WASM Orderbook Core - 1M tx/sec capability"

# Install system dependencies for WASM and build tools
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    build-essential \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Install wasm-pack for WASM builds
RUN curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Set working directory
WORKDIR /app

# Copy Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./
COPY src/lib.rs src/lib.rs

# Create dummy main.rs for initial build
RUN mkdir -p src/bin && echo "fn main() {}" > src/bin/dummy.rs

# Pre-build dependencies (this layer will be cached)
RUN cargo build --release --bin dummy

# Remove dummy binary
RUN rm -rf src/bin target/release/deps/dummy*

# Copy source code
COPY . .

# Build WASM package with maximum optimization
RUN wasm-pack build \
    --target web \
    --out-dir pkg \
    --release \
    --scope revolutionary-trading \
    -- --features "simd,bulk-memory"

# Optimize WASM binary further with wasm-opt
RUN npm install -g wasm-opt
RUN wasm-opt -Oz --enable-simd --enable-bulk-memory \
    pkg/trading_orderbook_bg.wasm \
    -o pkg/trading_orderbook_bg.wasm

# Build native binary for server-side processing
RUN cargo build --release --features "native-optimizations"

# Production stage - minimal runtime
FROM debian:bookworm-slim

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r trading && useradd -r -g trading trading

# Set working directory
WORKDIR /app

# Copy WASM artifacts from builder
COPY --from=builder /app/pkg ./wasm-pkg/
COPY --from=builder /app/target/release/trading_orderbook ./bin/

# Copy native binary if available
COPY --from=builder /app/target/release/trading-orderbook-server ./bin/ 2>/dev/null || true

# Create nginx configuration for serving WASM files
RUN mkdir -p /etc/nginx/sites-available
COPY <<EOF /etc/nginx/sites-available/wasm-server
server {
    listen 8080;
    server_name localhost;
    
    # Enable gzip compression for WASM files
    gzip on;
    gzip_vary on;
    gzip_types
        application/wasm
        application/javascript
        text/plain
        text/css
        text/javascript;
    
    # Serve WASM files with correct MIME type
    location ~* \\.wasm$ {
        root /app/wasm-pkg;
        add_header Content-Type application/wasm;
        add_header Cache-Control "public, max-age=31536000";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type";
        
        # Enable cross-origin isolation for SharedArrayBuffer
        add_header Cross-Origin-Embedder-Policy require-corp;
        add_header Cross-Origin-Opener-Policy same-origin;
    }
    
    # Serve JavaScript bindings
    location ~* \\.js$ {
        root /app/wasm-pkg;
        add_header Content-Type application/javascript;
        add_header Cache-Control "public, max-age=31536000";
        add_header Access-Control-Allow-Origin "*";
    }
    
    # Serve TypeScript definitions
    location ~* \\.d\\.ts$ {
        root /app/wasm-pkg;
        add_header Content-Type text/plain;
        add_header Access-Control-Allow-Origin "*";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
    
    # Metrics endpoint (if native binary is available)
    location /metrics {
        proxy_pass http://127.0.0.1:9090/metrics;
        proxy_set_header Host \\$host;
        proxy_set_header X-Real-IP \\$remote_addr;
    }
    
    # API proxy for orderbook operations
    location /api/ {
        proxy_pass http://127.0.0.1:9090/;
        proxy_set_header Host \\$host;
        proxy_set_header X-Real-IP \\$remote_addr;
        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \\$scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade \\$http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
EOF

# Enable the site
RUN ln -s /etc/nginx/sites-available/wasm-server /etc/nginx/sites-enabled/
RUN rm -f /etc/nginx/sites-enabled/default

# Set ownership
RUN chown -R trading:trading /app
RUN chown -R trading:trading /var/log/nginx
RUN chown -R trading:trading /var/lib/nginx

# Create startup script
COPY <<EOF /app/start.sh
#!/bin/bash
set -e

echo "üöÄ Starting Revolutionary Trading WASM Orderbook..."

# Start nginx for serving WASM files
echo "üì¶ Starting WASM file server..."
nginx -g "daemon on;"

# Start native orderbook server if available
if [ -f "./bin/trading-orderbook-server" ]; then
    echo "‚ö° Starting native orderbook server..."
    ./bin/trading-orderbook-server &
    SERVER_PID=\\$!
else
    echo "‚ö†Ô∏è  Native server not available, serving WASM files only"
    SERVER_PID=""
fi

# Health check function
health_check() {
    curl -f http://localhost:8080/health >/dev/null 2>&1
}

# Wait for services to be ready
echo "üîç Waiting for services to be ready..."
for i in {1..30}; do
    if health_check; then
        echo "‚úÖ Services are ready!"
        break
    fi
    if [ \\$i -eq 30 ]; then
        echo "‚ùå Services failed to start within 30 seconds"
        exit 1
    fi
    sleep 1
done

echo "üéØ WASM Orderbook ready for 1 million transactions per second!"
echo "üìä WASM package available at: http://localhost:8080/"
echo "üîó Health check: http://localhost:8080/health"

# Keep container running
if [ -n "\\$SERVER_PID" ]; then
    wait \\$SERVER_PID
else
    # Keep nginx running
    tail -f /var/log/nginx/access.log &
    tail -f /var/log/nginx/error.log &
    wait
fi
EOF

RUN chmod +x /app/start.sh

# Switch to non-root user
USER trading

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Performance and security optimizations
ENV RUST_BACKTRACE=1
ENV RUST_LOG=info
ENV MALLOC_ARENA_MAX=2
ENV MALLOC_MMAP_THRESHOLD_=131072
ENV MALLOC_TRIM_THRESHOLD_=131072
ENV MALLOC_TOP_PAD_=131072
ENV MALLOC_MMAP_MAX_=65536

# Set CPU affinity for maximum performance (if running with --privileged)
ENV PERFORMANCE_MODE=true

# Start the services
CMD ["/app/start.sh"]

# Build-time metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.label-schema.build-date=\$BUILD_DATE
LABEL org.label-schema.name="Revolutionary Trading WASM Orderbook"
LABEL org.label-schema.description="Production-optimized Rust WASM orderbook for 1M tx/sec trading"
LABEL org.label-schema.version=\$VERSION
LABEL org.label-schema.vcs-ref=\$VCS_REF
LABEL org.label-schema.vcs-url="https://github.com/revolutionary-trading/orderbook-core"
LABEL org.label-schema.schema-version="1.0"