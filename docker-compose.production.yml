version: '3.8'

# üöÄ KRINS-Chronicle-Keeper Production Deployment
# Optimized for enterprise production environments

services:
  # üåê Frontend Web Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    image: krins-chronicle-keeper/frontend:latest
    container_name: krins-frontend-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-443}:443"
      - "${FRONTEND_HTTP_PORT:-80}:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL:-https://api.krins.company}
      - REACT_APP_WS_URL=${WS_URL:-wss://api.krins.company}
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - fastapi
      - semantic-search
    networks:
      - krins-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ‚ö° FastAPI Backend
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHON_ENV=production
    image: krins-chronicle-keeper/fastapi:latest
    container_name: krins-fastapi-prod
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - PYTHON_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://krins_user:${POSTGRES_PASSWORD}@postgres:5432/krins_production}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://krins.company,https://app.krins.company}
      - LOG_LEVEL=info
      - MAX_WORKERS=4
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - krins-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # üîç Semantic Search API
  semantic-search:
    build:
      context: ./semantic-search-backend
      dockerfile: Dockerfile
    image: krins-chronicle-keeper/semantic-search:latest
    container_name: krins-semantic-search-prod
    restart: unless-stopped
    ports:
      - "${SEMANTIC_PORT:-3003}:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://krins_user:${POSTGRES_PASSWORD}@postgres:5432/krins_production}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=info
      - MAX_WORKERS=2
    volumes:
      - ./semantic-search-backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - krins-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 750M

  # üîÑ WebSocket Server
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.websocket
    image: krins-chronicle-keeper/websocket:latest
    container_name: krins-websocket-prod
    restart: unless-stopped
    ports:
      - "${WS_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://krins.company,https://app.krins.company}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    depends_on:
      - redis
    networks:
      - krins-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üêò PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: krins-postgres-prod
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=krins_production
      - POSTGRES_USER=krins_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./config/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups/postgres:/backups
    networks:
      - krins-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U krins_user -d krins_production"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=3GB

  # üì¶ Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: krins-redis-prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - krins-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # üìä Monitoring & Observability
  monitoring:
    image: prom/prometheus:latest
    container_name: krins-monitoring-prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - krins-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # üìà Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: krins-grafana-prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - monitoring
    networks:
      - krins-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # üîÑ Backup Service
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    image: krins-chronicle-keeper/backup:latest
    container_name: krins-backup-prod
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - postgres
      - redis
    networks:
      - krins-network

# üåê Network Configuration
networks:
  krins-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üíæ Persistent Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/krins}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/krins}/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local