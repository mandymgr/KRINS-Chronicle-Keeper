name: 🔧 Environment Configuration Validation

on:
  pull_request:
    paths:
      - '.env.example'
      - '.env.template'
      - '**/package.json'
      - 'pnpm-workspace.yaml'
      - 'docker-compose*.yml'
  push:
    branches: [main, develop]
    paths:
      - '.env.example'
      - '.env.template' 
      - '**/package.json'
      - 'pnpm-workspace.yaml'

env:
  NODE_VERSION: '18'

jobs:
  # 🔍 Environment Configuration Consistency Check
  env-config-validation:
    name: 🔧 Environment Config Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Validate Master Environment Configuration
        id: env-validation
        run: |
          echo "🔍 Validating master environment configuration..."
          
          # Check if .env.example exists and is well-formed
          if [ ! -f ".env.example" ]; then
            echo "❌ Master .env.example is missing!"
            exit 1
          fi
          
          # Validate essential configuration sections
          MISSING_SECTIONS=""
          
          if ! grep -q "# 🤖 AI & OpenAI Configuration" .env.example; then
            MISSING_SECTIONS="$MISSING_SECTIONS AI_CONFIG"
          fi
          
          if ! grep -q "# 🗄️ Database Configuration" .env.example; then
            MISSING_SECTIONS="$MISSING_SECTIONS DB_CONFIG"
          fi
          
          if ! grep -q "# 🔴 Redis Configuration" .env.example; then
            MISSING_SECTIONS="$MISSING_SECTIONS REDIS_CONFIG"
          fi
          
          if ! grep -q "# 🌐 Server Configuration" .env.example; then
            MISSING_SECTIONS="$MISSING_SECTIONS SERVER_CONFIG"
          fi
          
          if ! grep -q "# 🔐 Security & CORS Configuration" .env.example; then
            MISSING_SECTIONS="$MISSING_SECTIONS SECURITY_CONFIG"
          fi
          
          if [ ! -z "$MISSING_SECTIONS" ]; then
            echo "❌ Missing essential configuration sections: $MISSING_SECTIONS"
            exit 1
          fi
          
          # Validate critical variables are present
          REQUIRED_VARS="OPENAI_API_KEY DATABASE_URL DB_PORT REDIS_URL API_PORT SECRET_KEY JWT_SECRET"
          MISSING_VARS=""
          
          for VAR in $REQUIRED_VARS; do
            if ! grep -q "^$VAR=" .env.example; then
              MISSING_VARS="$MISSING_VARS $VAR"
            fi
          done
          
          if [ ! -z "$MISSING_VARS" ]; then
            echo "❌ Missing critical environment variables: $MISSING_VARS"
            exit 1
          fi
          
          # Check for port conflicts
          DB_PORT=$(grep "^DB_PORT=" .env.example | cut -d'=' -f2)
          REDIS_PORT=$(grep "^REDIS_PORT=" .env.example | cut -d'=' -f2)
          API_PORT=$(grep "^API_PORT=" .env.example | cut -d'=' -f2)
          FRONTEND_PORT=$(grep "^FRONTEND_PORT=" .env.example | cut -d'=' -f2)
          
          echo "🔍 Port Configuration Check:"
          echo "  Database: $DB_PORT"
          echo "  Redis: $REDIS_PORT"
          echo "  API: $API_PORT"
          echo "  Frontend: $FRONTEND_PORT"
          
          # Check for common port conflicts
          PORTS="$DB_PORT $REDIS_PORT $API_PORT $FRONTEND_PORT"
          UNIQUE_PORTS=$(echo $PORTS | tr ' ' '\n' | sort -u | wc -l)
          TOTAL_PORTS=$(echo $PORTS | wc -w)
          
          if [ $UNIQUE_PORTS -ne $TOTAL_PORTS ]; then
            echo "❌ Port conflicts detected in configuration!"
            exit 1
          fi
          
          echo "✅ Environment configuration validation passed"
          echo "validation-passed=true" >> $GITHUB_OUTPUT

      - name: 🔍 Check for Environment Conflicts
        run: |
          echo "🔍 Checking for environment file conflicts..."
          
          # Look for potential conflicting .env files
          CONFLICTING_ENVS=$(find . -name ".env*" -not -name ".env.example" -not -name ".env.template" -not -path "./_quarantine/*" -not -path "./node_modules/*" | head -10)
          
          if [ ! -z "$CONFLICTING_ENVS" ]; then
            echo "⚠️ Found potential conflicting environment files:"
            echo "$CONFLICTING_ENVS"
            echo ""
            echo "📋 These files should either be:"
            echo "  1. Removed if duplicates"
            echo "  2. Moved to quarantine if deprecated"
            echo "  3. Documented if intentional"
          else
            echo "✅ No conflicting environment files found"
          fi

      - name: 🔍 Validate Package Manager Consistency
        run: |
          echo "🔍 Validating package manager consistency..."
          
          # Check if pnpm-workspace.yaml exists
          if [ ! -f "pnpm-workspace.yaml" ]; then
            echo "❌ pnpm-workspace.yaml is missing!"
            exit 1
          fi
          
          # Check if pnpm-lock.yaml exists
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "❌ pnpm-lock.yaml is missing! Run 'pnpm install' to generate."
            exit 1
          fi
          
          # Check for conflicting lock files
          LOCK_FILES=$(find . -name "package-lock.json" -o -name "yarn.lock" -o -name "bun.lock*" -not -path "./_quarantine/*" -not -path "./node_modules/*" | head -5)
          
          if [ ! -z "$LOCK_FILES" ]; then
            echo "❌ Conflicting package manager lock files found:"
            echo "$LOCK_FILES"
            echo ""
            echo "📋 Only pnpm-lock.yaml should exist in the root."
            echo "Remove conflicting lock files or move them to quarantine."
            exit 1
          fi
          
          echo "✅ Package manager consistency validated"

      - name: 🔍 Docker Configuration Validation
        run: |
          echo "🔍 Validating Docker configuration..."
          
          # Check if docker-compose.yml exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml is missing!"
            exit 1
          fi
          
          # Validate environment variable references in docker-compose
          DOCKER_ENV_VARS=$(grep -o '\${[^}]*}' docker-compose.yml | sed 's/\${//g; s/}//g' | sort -u)
          
          echo "🔍 Docker environment variables referenced:"
          echo "$DOCKER_ENV_VARS"
          
          # Check if critical Docker env vars are defined in .env.example
          MISSING_DOCKER_VARS=""
          for VAR in $DOCKER_ENV_VARS; do
            if ! grep -q "^$VAR=" .env.example; then
              MISSING_DOCKER_VARS="$MISSING_DOCKER_VARS $VAR"
            fi
          done
          
          if [ ! -z "$MISSING_DOCKER_VARS" ]; then
            echo "⚠️ Docker references variables not in .env.example: $MISSING_DOCKER_VARS"
            echo "Consider adding these to .env.example or verify they're intentionally external."
          else
            echo "✅ All Docker environment variables are defined in .env.example"
          fi

  # 📋 Configuration Completeness Check
  config-completeness:
    name: 📋 Configuration Completeness
    runs-on: ubuntu-latest
    needs: env-config-validation
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Generate Configuration Report
        run: |
          echo "📋 Generating configuration completeness report..."
          
          cat > config-report.md << 'EOF'
          # 🔧 Environment Configuration Report
          
          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## ✅ Validation Results
          - **Master Config**: .env.example ✅ Valid
          - **Package Manager**: pnpm ✅ Consistent
          - **Docker Config**: docker-compose.yml ✅ Valid
          
          ## 📊 Configuration Statistics
          EOF
          
          # Count environment variables
          ENV_VAR_COUNT=$(grep -c "^[A-Z_]*=" .env.example)
          COMMENTED_LINES=$(grep -c "^#" .env.example)
          TOTAL_LINES=$(wc -l < .env.example)
          
          echo "- **Environment Variables**: $ENV_VAR_COUNT" >> config-report.md
          echo "- **Documentation Lines**: $COMMENTED_LINES" >> config-report.md
          echo "- **Total Lines**: $TOTAL_LINES" >> config-report.md
          echo "- **Documentation Ratio**: $(( COMMENTED_LINES * 100 / TOTAL_LINES ))%" >> config-report.md
          
          # Check workspace packages
          WORKSPACE_PACKAGES=$(grep -c "^ *- " pnpm-workspace.yaml)
          echo "- **Workspace Packages**: $WORKSPACE_PACKAGES" >> config-report.md
          
          echo "" >> config-report.md
          echo "## 🎯 Configuration Sections" >> config-report.md
          echo "$(grep "^# =" .env.example | sed 's/^# =*//; s/=*$//' | sed 's/^/- /')" >> config-report.md
          
          echo "" >> config-report.md
          echo "## 🔧 Setup Instructions" >> config-report.md
          echo "1. Copy \`.env.example\` to \`.env\`" >> config-report.md
          echo "2. Customize values for your environment" >> config-report.md
          echo "3. Run \`pnpm install\` to install dependencies" >> config-report.md
          echo "4. Run \`pnpm run dev\` to start development" >> config-report.md
          
          echo "✅ Configuration report generated"
          cat config-report.md

      - name: 📤 Upload Configuration Report
        uses: actions/upload-artifact@v4
        with:
          name: environment-config-report
          path: config-report.md
          retention-days: 30

  # 🧪 Configuration Testing
  config-testing:
    name: 🧪 Configuration Testing
    runs-on: ubuntu-latest
    needs: env-config-validation
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install pnpm
        run: npm install -g pnpm

      - name: 🧪 Test Environment Loading
        run: |
          echo "🧪 Testing environment configuration loading..."
          
          # Create test .env from example
          cp .env.example .env.test
          
          # Replace placeholder values with test values
          sed -i 's/your-openai-api-key-here/test-key/g' .env.test
          sed -i 's/your-secret-key-here-change-in-production/test-secret-key-12345/g' .env.test
          sed -i 's/your-jwt-secret-key/test-jwt-secret/g' .env.test
          
          # Test configuration parsing with Node.js
          cat > test-config.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function parseEnvFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            const env = {};
            
            content.split('\n').forEach(line => {
              line = line.trim();
              if (line && !line.startsWith('#') && line.includes('=')) {
                const [key, ...valueParts] = line.split('=');
                env[key.trim()] = valueParts.join('=').trim();
              }
            });
            
            return env;
          }
          
          try {
            const env = parseEnvFile('.env.test');
            
            console.log('🔍 Testing critical configuration values...');
            
            const required = ['OPENAI_API_KEY', 'DATABASE_URL', 'SECRET_KEY', 'JWT_SECRET'];
            let missing = [];
            
            required.forEach(key => {
              if (!env[key] || env[key].includes('your-') || env[key].includes('change-in-production')) {
                missing.push(key);
              }
            });
            
            if (missing.length > 0) {
              console.log('⚠️ Variables still contain placeholder values:', missing.join(', '));
              console.log('This is expected in CI - users should replace these values.');
            }
            
            console.log('✅ Environment configuration structure is valid');
            console.log(`📊 Loaded ${Object.keys(env).length} environment variables`);
            
            // Test port configuration
            const ports = {
              DB_PORT: env.DB_PORT,
              REDIS_PORT: env.REDIS_PORT,
              API_PORT: env.API_PORT,
              FRONTEND_PORT: env.FRONTEND_PORT
            };
            
            console.log('🔍 Port configuration:', JSON.stringify(ports, null, 2));
            
            process.exit(0);
          } catch (error) {
            console.error('❌ Configuration test failed:', error.message);
            process.exit(1);
          }
          EOF
          
          node test-config.js
          
          # Cleanup
          rm .env.test test-config.js

      - name: 🐳 Test Docker Compose Configuration
        run: |
          echo "🐳 Testing Docker Compose configuration..."
          
          # Create minimal .env for Docker testing
          cp .env.example .env
          
          # Test docker-compose syntax
          docker-compose config > /dev/null
          
          if [ $? -eq 0 ]; then
            echo "✅ Docker Compose configuration is valid"
          else
            echo "❌ Docker Compose configuration has errors"
            exit 1
          fi
          
          # Cleanup
          rm .env

  # 📊 Configuration Analytics
  config-analytics:
    name: 📊 Configuration Analytics
    runs-on: ubuntu-latest
    needs: [config-completeness, config-testing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 30

      - name: 📊 Analyze Configuration Evolution
        run: |
          echo "📊 Analyzing configuration evolution..."
          
          # Track .env.example changes over time
          ENV_COMMITS=$(git log --oneline --follow .env.example | wc -l)
          RECENT_CHANGES=$(git log --oneline --since="30 days ago" --follow .env.example | wc -l)
          
          # Count quarantined environment files
          QUARANTINED_FILES=0
          if [ -d "_quarantine" ]; then
            QUARANTINED_FILES=$(find _quarantine -name ".env*" | wc -l)
          fi
          
          # Generate analytics
          cat > config-analytics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "envExampleCommits": $ENV_COMMITS,
            "recentChanges": $RECENT_CHANGES,
            "quarantinedEnvFiles": $QUARANTINED_FILES,
            "cleanup": {
              "performed": true,
              "date": "2025-09-11",
              "filesConsolidated": 18,
              "finalActiveConfigs": 7
            }
          }
          EOF
          
          echo "📊 Configuration Analytics:"
          cat config-analytics.json | jq .
          
          echo "✅ Configuration analytics completed"

      - name: 📤 Upload Configuration Analytics
        uses: actions/upload-artifact@v4
        with:
          name: config-analytics
          path: config-analytics.json
          retention-days: 90